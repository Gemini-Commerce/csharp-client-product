/*
 * Product Service
 *
 * API for managing products
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = product.Client.OpenAPIDateConverter;

namespace product.Model
{
    /// <summary>
    /// EntitymanagerAttributeOption
    /// </summary>
    [DataContract(Name = "entitymanagerAttributeOption")]
    public partial class EntitymanagerAttributeOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntitymanagerAttributeOption" /> class.
        /// </summary>
        /// <param name="option">option.</param>
        /// <param name="sort">sort.</param>
        /// <param name="id">id.</param>
        /// <param name="code">code.</param>
        /// <param name="value">value.</param>
        /// <param name="swatches">swatches.</param>
        public EntitymanagerAttributeOption(Dictionary<string, string> option = default(Dictionary<string, string>), long sort = default(long), string id = default(string), string code = default(string), ProductentitymanagerLocalizedText value = default(ProductentitymanagerLocalizedText), List<EntitymanagerAttributeOptionSwatch> swatches = default(List<EntitymanagerAttributeOptionSwatch>))
        {
            this.Option = option;
            this.Sort = sort;
            this.Id = id;
            this.Code = code;
            this.Value = value;
            this.Swatches = swatches;
        }

        /// <summary>
        /// Gets or Sets Option
        /// </summary>
        [DataMember(Name = "option", EmitDefaultValue = false)]
        public Dictionary<string, string> Option { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public long Sort { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public ProductentitymanagerLocalizedText Value { get; set; }

        /// <summary>
        /// Gets or Sets Swatches
        /// </summary>
        [DataMember(Name = "swatches", EmitDefaultValue = false)]
        public List<EntitymanagerAttributeOptionSwatch> Swatches { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EntitymanagerAttributeOption {\n");
            sb.Append("  Option: ").Append(Option).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Swatches: ").Append(Swatches).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
