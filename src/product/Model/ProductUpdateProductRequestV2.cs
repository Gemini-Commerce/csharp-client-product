/*
 * Product Service
 *
 * API for managing products
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = product.Client.OpenAPIDateConverter;

namespace product.Model
{
    /// <summary>
    /// ProductUpdateProductRequestV2
    /// </summary>
    [DataContract(Name = "productUpdateProductRequestV2")]
    public partial class ProductUpdateProductRequestV2 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductUpdateProductRequestV2" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="id">id.</param>
        /// <param name="code">code.</param>
        /// <param name="attributesMask">attributesMask.</param>
        /// <param name="urlKey">urlKey.</param>
        /// <param name="maxSaleableQuantity">maxSaleableQuantity.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="variants">variants.</param>
        /// <param name="mediaVariantAttributes">mediaVariantAttributes.</param>
        public ProductUpdateProductRequestV2(string tenantId = default(string), string id = default(string), string code = default(string), ProductFieldMask attributesMask = default(ProductFieldMask), ProductLocalizedText urlKey = default(ProductLocalizedText), long maxSaleableQuantity = default(long), Dictionary<string, ProtobufAny> attributes = default(Dictionary<string, ProtobufAny>), Dictionary<string, ProductProductVariant> variants = default(Dictionary<string, ProductProductVariant>), List<string> mediaVariantAttributes = default(List<string>))
        {
            this.TenantId = tenantId;
            this.Id = id;
            this.Code = code;
            this.AttributesMask = attributesMask;
            this.UrlKey = urlKey;
            this.MaxSaleableQuantity = maxSaleableQuantity;
            this.Attributes = attributes;
            this.Variants = variants;
            this.MediaVariantAttributes = mediaVariantAttributes;
        }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", EmitDefaultValue = false)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets AttributesMask
        /// </summary>
        [DataMember(Name = "attributesMask", EmitDefaultValue = false)]
        public ProductFieldMask AttributesMask { get; set; }

        /// <summary>
        /// Gets or Sets UrlKey
        /// </summary>
        [DataMember(Name = "urlKey", EmitDefaultValue = false)]
        public ProductLocalizedText UrlKey { get; set; }

        /// <summary>
        /// Gets or Sets MaxSaleableQuantity
        /// </summary>
        [DataMember(Name = "maxSaleableQuantity", EmitDefaultValue = false)]
        public long MaxSaleableQuantity { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public Dictionary<string, ProtobufAny> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets Variants
        /// </summary>
        [DataMember(Name = "variants", EmitDefaultValue = false)]
        public Dictionary<string, ProductProductVariant> Variants { get; set; }

        /// <summary>
        /// Gets or Sets MediaVariantAttributes
        /// </summary>
        [DataMember(Name = "mediaVariantAttributes", EmitDefaultValue = false)]
        public List<string> MediaVariantAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductUpdateProductRequestV2 {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  AttributesMask: ").Append(AttributesMask).Append("\n");
            sb.Append("  UrlKey: ").Append(UrlKey).Append("\n");
            sb.Append("  MaxSaleableQuantity: ").Append(MaxSaleableQuantity).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Variants: ").Append(Variants).Append("\n");
            sb.Append("  MediaVariantAttributes: ").Append(MediaVariantAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
