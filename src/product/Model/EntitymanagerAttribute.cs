/*
 * Product Service
 *
 * Introducing our revolutionary Product Management Service! Designed to streamline your product inventory and elevate customer experiences, our cutting-edge protobuf service is a game-changer in the world of efficient product management.  With our service, you can effortlessly create new products, allowing you to quickly bring your ideas to life and expand your catalog. Retrieve product information in a snap, providing accurate and personalized details to your customers based on their specific needs and preferences.  Stay ahead of the competition by easily updating product information, ensuring your catalog is always up-to-date and optimized. Seamlessly remove products from your inventory when needed, maintaining a clean and relevant product selection.  Enhance the visual appeal of your products with our advanced media gallery functionalities. Effortlessly add and update captivating images and videos to showcase your products in the best possible light, engaging your customers and driving conversions.  Personalization is key in today's market, and our service enables you to offer unique options to your customers. Easily create and manage lists of customizable options for your products, providing flexibility and tailoring to individual preferences.  Attributes play a vital role in defining products, and our service empowers you to effectively manage them. From bulk attribute creation to listing and retrieving attribute options, our service ensures your product information is rich and comprehensive.  Our service extends its capabilities to entity management, allowing you to effortlessly handle different entities and create customized options lists associated with them. This provides further flexibility and customization options for your product offerings.  When it comes to bulk updates, our service has you covered. Effortlessly update multiple products simultaneously, saving you time and streamlining your operations.  Finding specific products and variants is a breeze with our service. Quickly locate products based on their unique stock keeping unit (SKU) values, ensuring efficient inventory management and smooth order fulfillment.  Experience a new level of efficiency and productivity with our Product Management Service. Unlock the full potential of streamlined product management and empower your business to thrive in today's competitive market. Try our service today and elevate your product management to new heights!
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = product.Client.OpenAPIDateConverter;

namespace product.Model
{
    /// <summary>
    /// EntitymanagerAttribute
    /// </summary>
    [DataContract(Name = "entitymanagerAttribute")]
    public partial class EntitymanagerAttribute : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public EntitymanagerTypes? Type { get; set; }

        /// <summary>
        /// Gets or Sets RenderAs
        /// </summary>
        [DataMember(Name = "renderAs", EmitDefaultValue = false)]
        public EntitymanagerRenderAs? RenderAs { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntitymanagerAttribute" /> class.
        /// </summary>
        /// <param name="entityId">entityId.</param>
        /// <param name="code">code.</param>
        /// <param name="label">label.</param>
        /// <param name="type">type.</param>
        /// <param name="optionList">optionList.</param>
        /// <param name="entity">entity.</param>
        /// <param name="varDefault">varDefault.</param>
        /// <param name="isRequired">isRequired.</param>
        /// <param name="isSystem">isSystem.</param>
        /// <param name="isRepeated">isRepeated.</param>
        /// <param name="sort">sort.</param>
        /// <param name="groupCode">groupCode.</param>
        /// <param name="title">title.</param>
        /// <param name="renderAs">renderAs.</param>
        /// <param name="aiContext">aiContext.</param>
        public EntitymanagerAttribute(string entityId = default(string), string code = default(string), string label = default(string), EntitymanagerTypes? type = default(EntitymanagerTypes?), string optionList = default(string), string entity = default(string), string varDefault = default(string), bool isRequired = default(bool), bool isSystem = default(bool), bool isRepeated = default(bool), int sort = default(int), string groupCode = default(string), Dictionary<string, string> title = default(Dictionary<string, string>), EntitymanagerRenderAs? renderAs = default(EntitymanagerRenderAs?), EntitymanagerAiContext aiContext = default(EntitymanagerAiContext))
        {
            this.EntityId = entityId;
            this.Code = code;
            this.Label = label;
            this.Type = type;
            this.OptionList = optionList;
            this.Entity = entity;
            this.Default = varDefault;
            this.IsRequired = isRequired;
            this.IsSystem = isSystem;
            this.IsRepeated = isRepeated;
            this.Sort = sort;
            this.GroupCode = groupCode;
            this.Title = title;
            this.RenderAs = renderAs;
            this.AiContext = aiContext;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [DataMember(Name = "entityId", EmitDefaultValue = false)]
        public string EntityId { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets OptionList
        /// </summary>
        [DataMember(Name = "optionList", EmitDefaultValue = false)]
        public string OptionList { get; set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public string Entity { get; set; }

        /// <summary>
        /// Gets or Sets Default
        /// </summary>
        [DataMember(Name = "default", EmitDefaultValue = false)]
        public string Default { get; set; }

        /// <summary>
        /// Gets or Sets IsRequired
        /// </summary>
        [DataMember(Name = "isRequired", EmitDefaultValue = true)]
        public bool IsRequired { get; set; }

        /// <summary>
        /// Gets or Sets IsSystem
        /// </summary>
        [DataMember(Name = "isSystem", EmitDefaultValue = true)]
        public bool IsSystem { get; set; }

        /// <summary>
        /// Gets or Sets IsRepeated
        /// </summary>
        [DataMember(Name = "isRepeated", EmitDefaultValue = true)]
        public bool IsRepeated { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public int Sort { get; set; }

        /// <summary>
        /// Gets or Sets GroupCode
        /// </summary>
        [DataMember(Name = "groupCode", EmitDefaultValue = false)]
        public string GroupCode { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public Dictionary<string, string> Title { get; set; }

        /// <summary>
        /// Gets or Sets AiContext
        /// </summary>
        [DataMember(Name = "aiContext", EmitDefaultValue = false)]
        public EntitymanagerAiContext AiContext { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EntitymanagerAttribute {\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OptionList: ").Append(OptionList).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("  IsRepeated: ").Append(IsRepeated).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  GroupCode: ").Append(GroupCode).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  RenderAs: ").Append(RenderAs).Append("\n");
            sb.Append("  AiContext: ").Append(AiContext).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
