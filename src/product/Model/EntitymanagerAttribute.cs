/*
 * Product Service
 *
 * API for managing products
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = product.Client.OpenAPIDateConverter;

namespace product.Model
{
    /// <summary>
    /// EntitymanagerAttribute
    /// </summary>
    [DataContract(Name = "entitymanagerAttribute")]
    public partial class EntitymanagerAttribute : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public EntitymanagerTypes? Type { get; set; }

        /// <summary>
        /// Gets or Sets RenderAs
        /// </summary>
        [DataMember(Name = "renderAs", EmitDefaultValue = false)]
        public EntitymanagerRenderAs? RenderAs { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntitymanagerAttribute" /> class.
        /// </summary>
        /// <param name="entityId">entityId.</param>
        /// <param name="code">code.</param>
        /// <param name="label">label.</param>
        /// <param name="type">type.</param>
        /// <param name="optionList">optionList.</param>
        /// <param name="entity">entity.</param>
        /// <param name="varDefault">varDefault.</param>
        /// <param name="isRequired">isRequired.</param>
        /// <param name="isSystem">isSystem.</param>
        /// <param name="isRepeated">isRepeated.</param>
        /// <param name="sort">sort.</param>
        /// <param name="groupCode">groupCode.</param>
        /// <param name="title">title.</param>
        /// <param name="renderAs">renderAs.</param>
        public EntitymanagerAttribute(string entityId = default(string), string code = default(string), string label = default(string), EntitymanagerTypes? type = default(EntitymanagerTypes?), string optionList = default(string), string entity = default(string), string varDefault = default(string), bool isRequired = default(bool), bool isSystem = default(bool), bool isRepeated = default(bool), int sort = default(int), string groupCode = default(string), Dictionary<string, string> title = default(Dictionary<string, string>), EntitymanagerRenderAs? renderAs = default(EntitymanagerRenderAs?))
        {
            this.EntityId = entityId;
            this.Code = code;
            this.Label = label;
            this.Type = type;
            this.OptionList = optionList;
            this.Entity = entity;
            this.VarDefault = varDefault;
            this.IsRequired = isRequired;
            this.IsSystem = isSystem;
            this.IsRepeated = isRepeated;
            this.Sort = sort;
            this.GroupCode = groupCode;
            this.Title = title;
            this.RenderAs = renderAs;
        }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [DataMember(Name = "entityId", EmitDefaultValue = false)]
        public string EntityId { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets OptionList
        /// </summary>
        [DataMember(Name = "optionList", EmitDefaultValue = false)]
        public string OptionList { get; set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public string Entity { get; set; }

        /// <summary>
        /// Gets or Sets VarDefault
        /// </summary>
        [DataMember(Name = "default", EmitDefaultValue = false)]
        public string VarDefault { get; set; }

        /// <summary>
        /// Gets or Sets IsRequired
        /// </summary>
        [DataMember(Name = "isRequired", EmitDefaultValue = true)]
        public bool IsRequired { get; set; }

        /// <summary>
        /// Gets or Sets IsSystem
        /// </summary>
        [DataMember(Name = "isSystem", EmitDefaultValue = true)]
        public bool IsSystem { get; set; }

        /// <summary>
        /// Gets or Sets IsRepeated
        /// </summary>
        [DataMember(Name = "isRepeated", EmitDefaultValue = true)]
        public bool IsRepeated { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public int Sort { get; set; }

        /// <summary>
        /// Gets or Sets GroupCode
        /// </summary>
        [DataMember(Name = "groupCode", EmitDefaultValue = false)]
        public string GroupCode { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public Dictionary<string, string> Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EntitymanagerAttribute {\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OptionList: ").Append(OptionList).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  VarDefault: ").Append(VarDefault).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("  IsRepeated: ").Append(IsRepeated).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  GroupCode: ").Append(GroupCode).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  RenderAs: ").Append(RenderAs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
